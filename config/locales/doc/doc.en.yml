en:
 doc:
   introduction:
     title: Introduction
     sections:
       what_is_berling:
         title: What is Berlin?
         content: |
           Berlin is a turn-based multiplayer artificial intelligence
           strategy board game. The idea is simple: you code an artificial
           intelligence (AI) and register it. You can then compete with
           the other AIs in a game similar to Risk.
       how_to_play:
         title: How do I play
         content: |
           All the AIs are placed on a board game with paths, nodes,
           cities and soldiers. The board's current state is sent to
           your AI with a set of rules (explained later). Your AI is
           then able to decide how to move it's soldiers in order to
           conquer as many cities as possible to earn points. Berlin
           will repeat process until the game is over, when a player
           wins or when the maximum number of turn has been reached.
       what_do_i_need:
         title: What do I need?
         content: |
           Berlin does not host any AI. Each user need to host his
           AIs and have an accessible URL when you register his AI.
           You can host the AI on your computer, but you should make
           sur that your AI remains accessible and functionnal at all
           time.
       programming_language:
         title: What programming language will I use?
         content: |
           All the communications between Berlin and your AI are over
           HTTP using JSON. This means that you can use the language
           of your choice, as long as you can host a server.
   specifications:
     title: Specifications
     sections:
       rules:
         title: Rules
         sections:
           maximum_number_of_turns:
             title: Maximum number of turns (maximum_number_of_turns)
             content: |
               The maximum number of turns allowed for the game. If
               the game reaches this many turns, the score will be
               distributed between the remaining AIs according to
               the nodes they currently control.
           directed_map:
             title: Directed map (directed)
             content: |
               In a directed map, the paths are one-way. This means that
               if there is a path between the node #1 and the node #2
               but not the other way around, the soldiers will not be
               able to travel from the node #2 to the node #1 directly.
               Undirected maps do not have this restriction and each paths
               is bidirectionnal.
           time_limit_per_turn:
             title: Time limit per turn (time_limit_per_turn)
             content: |
               The maximum allowed time for a turn, in milliseconds.
               If you AI has not responded within this time, Berlin
               understand that your AI will not move for this turn.
     board:
       title: Board game
       sections:
         nodes:
           title: Nodes (node)
           content: |
             The nodes are
             Les noeuds représentent le coeur du jeu. Il s'agit des intersections entre les différents chemins, et ce sont ces noeuds que vos
             troupes doivent posséder afin de controller la partie et gagner des points. Chaque noeud se voit associé un type dont les
             propriétés sont définies dans les règles propres à chaque partie. À titre d'exemple, il serait possible de définir un type de noeud
             appelé "Château", valant 4 points et donnant 2 soldats par tour, ainsi qu'un autre, appelé "Croisée des chemins", ne valant
             qu'un point tout en ne donnant aucun soldat. Les différents noeuds sont alors distribués sur le plateau, reliés entre eux par
             des chemins. Il vous importe donc de déterminer quels sont les noeuds qui vous intéressent et de combattre pour en obtenir possession.
           sections:
             owner_id:
               title: Possession (owner_id)
               content: |
                 Les noeuds peuvent être vacant ou encore occupé par un maximum d'un IA. Si plus d'un IAs se trouvent sur un même noeud au même moment,
                 un combat éclate jusqu'à ce que l'une d'entre elle n'en ressorte vaincoeur.
             soldiers_per_turn:
               title:Recrutement (soldiers_per_turn)
               content: |
                 Chaque noeud possède un type lui conférant certaines propriétés, dont l'une est appellée recrutement. Cette propriété spécifie le nombre de nouveaux soldats
                 auxquels le possesseur du noeud a droit à la fin d'un tour. Faites attention, car rien dans les règles n'interdit un recrutement négatif...
             points:
               title: Points (points)
               content: |
                 Chaque noeud peut valoir un nombre posifit ou négatif de points. Les points sont cumulés à la fin d'une partie, et chaque IA se voit attribué un score
                 en fonction du nombre de points qu'elle possède sur le nombre total de points disponibles durant la partie.
         paths:
           title: Chemins (paths)
           content: |
             Les chemins sont ce qui vous permets de passer d'un noeud à l'autre. Ils partent d'un noeud (from) vers un autre (to). N'oubliez pas! Si les règles
             spécifient que la carte est dirigée, il ne vous est possible que de vous rendre du noeud de départ au noeud d'arrivée, et non l'inverse.
             En revanche, une carte non dirigée permet de faire des allés-retours, du noeud d'arrivée au noeud de départ, et vice-versa.

         combats:
           title: Combats
           content: |
             Un combat survient lorsque plus d'un IA se trouvent sur un même noeud à la fin d'un même tour. Les combats sont fort simple : Tous les IAs présents
             perdent un soldat de manière simultanée jusqu'à ce qu'il ne reste qu'un seul vaincoeur, ou encore personne. La possession du noeud se vera attribuée
             au vaincoeur s'il y en a un, ou restera entre les mains du dernier possesseur autrement.

   communication:
     title: Communications
     sections:
       ready_url:
         title: Ready URL
         sections:
           what_it_is:
             title: Qu'est-ce que c'est?
             content: |
               Pour chaque IA, vous devez nous fournir ce qu'on appelle le Ready URL. Nous envoyons une requête à cet URL avant chaque
               partie afin de nous assurer que votre serveur est bel et bien fonctionnel. Votre seul objectif est de nous retourner
               un statut 200 OK. Nous en profitons au passage pour vous envoyer un premier apperçu du plateau de jeu, ce qui vous permettera
               dès lors de commencer à penser aux stratégies que vous utiliserez. Si pour une raison quelconque

           details:
             title: Détails de la requête envoyée
             content: |
               <dl>
                 <dt>Type</dt><dd>Post</dd>
                 <dt>Contenu</dt><dd>JSON</dd>
                 <dt>Paramètres envoyés</dt>
                 <dd>
                   <dl>
                     <dt>self</dt><dd>Entier représentant votre identifiant unique pour cette partie</dd>
                     <dt>game</dt><dd>String représentant l'identifiant unique de la partie</dd>
                     <dt>json</dt><dd>Voir annexe 1 : RequestJSON</dd>
                   </dl>
                 </dd>
                 <dt>Réponse attendue</dt>
                 <dd>
                   <dl>
                     <dt>Statut</dt><dd>200 OK</dd>
                   </dl>
                 </dd>
               </dl>
       on_turn_url:
         title: onTurn URL
         sections:
           what_it_is:
             title: Qu'est-ce que c'est?
             content: |
               Lors d'une partie, à chaque nouveau tour, Berlin vous enverra le nouvel état du jeu sur ce qu'on appelle le onTurn URL. Puisqu'à cette étape,
               votre serveur est considéré comme actif, toute requête restant sans réponse ou dont le temps de réponse dépasserait le délais
               permis dans les règles de la partie sera interpréter comme si vous n'aviez aucun ordre à donner pour ce tour. Les différents règles pour la
               partie sont également réenvoyées afin de permettre l'existence de serveurs stateless.
           details:
             title: Détails de la requête envoyée
             content: |
               <dl>
                 <dt>Type</dt><dd>Post</dd>
                 <dt>Contenu</dt><dd>JSON</dd>
                 <dt>Paramètres envoyés</dt>
                 <dd>
                   <dl>
                     <dt>self<dt><dd>Entier représentant votre identifiant unique pour cette partie</dd>
                     <dt>game<dt><dd>String représentant l'identifiant unique de la partie</dd>
                     <dt>turn<dt><dd>Entier représentant le tour actuel</dd>
                     <dt>json<dt><dd>Json représentant l'état actuel de la partie ainsi que ses paramètres. Voir annexe 1 : RequestJSON</dd>
                   </dl>
                 </dd>
                 <dt>Réponse attendue</dt>
                 <dd>
                   <dl>
                     <dt>Statut<dt><dd>200 OK</dd>
                     <dt>Body<dt><dd>Json représentant vos différents ordres pour le tour précisé en paramètre. Voir annexe 2 : ResponseJSON</dd>
                   </dl>
                 </dd>
